// Generated by CoffeeScript 1.8.0
(function() {
  var GameOfLife;

  GameOfLife = (function() {
    GameOfLife.prototype.boardSize = 30;

    GameOfLife.prototype.canvasSize = 500;

    GameOfLife.prototype.lineColor = '#e6e6e6';

    GameOfLife.prototype.liveCellColor = '#ffcc33';

    GameOfLife.prototype.deadCellColor = '#2e2e2e';

    function GameOfLife() {
      var i, j;
      this.board = (function() {
        var _i, _ref, _results;
        _results = [];
        for (i = _i = 1, _ref = this.boardSize + 1; 1 <= _ref ? _i < _ref : _i > _ref; i = 1 <= _ref ? ++_i : --_i) {
          _results.push((function() {
            var _j, _ref1, _results1;
            _results1 = [];
            for (j = _j = 1, _ref1 = this.boardSize + 1; 1 <= _ref1 ? _j < _ref1 : _j > _ref1; j = 1 <= _ref1 ? ++_j : --_j) {
              _results1.push(0);
            }
            return _results1;
          }).call(this));
        }
        return _results;
      }).call(this);
      this.paintBoard();
    }

    GameOfLife.prototype.runGeneration = function() {
      this.simulateGeneration();
      return this.paintBoard();
    };

    GameOfLife.prototype.clearBoard = function() {
      var col, row, _i, _ref, _results;
      _results = [];
      for (row = _i = 0, _ref = this.boardSize; 0 <= _ref ? _i < _ref : _i > _ref; row = 0 <= _ref ? ++_i : --_i) {
        _results.push((function() {
          var _j, _ref1, _results1;
          _results1 = [];
          for (col = _j = 0, _ref1 = this.boardSize; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; col = 0 <= _ref1 ? ++_j : --_j) {
            _results1.push(this.board[row][col] = 0);
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    GameOfLife.prototype.randPopulateBoard = function() {
      var col, row, _i, _ref, _results;
      _results = [];
      for (row = _i = 0, _ref = this.boardSize; 0 <= _ref ? _i < _ref : _i > _ref; row = 0 <= _ref ? ++_i : --_i) {
        _results.push((function() {
          var _j, _ref1, _results1;
          _results1 = [];
          for (col = _j = 0, _ref1 = this.boardSize; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; col = 0 <= _ref1 ? ++_j : --_j) {
            if (Math.random() < 0.5) {
              _results1.push(this.board[row][col] = 1);
            } else {
              _results1.push(this.board[row][col] = 0);
            }
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    GameOfLife.prototype.simulateGeneration = function() {
      var col, l, row, toDie, toLive, _i, _j, _k, _l, _len, _len1, _ref, _ref1, _results;
      toLive = [];
      toDie = [];
      for (row = _i = 0, _ref = this.boardSize; 0 <= _ref ? _i < _ref : _i > _ref; row = 0 <= _ref ? ++_i : --_i) {
        for (col = _j = 0, _ref1 = this.boardSize; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; col = 0 <= _ref1 ? ++_j : --_j) {
          this.handleCell(row, col, toLive, toDie);
        }
      }
      for (_k = 0, _len = toLive.length; _k < _len; _k++) {
        l = toLive[_k];
        this.board[l[0]][l[1]] = 1;
      }
      _results = [];
      for (_l = 0, _len1 = toDie.length; _l < _len1; _l++) {
        l = toDie[_l];
        _results.push(this.board[l[0]][l[1]] = 0);
      }
      return _results;
    };

    GameOfLife.prototype.handleCell = function(row, col, toLive, toDie) {
      var liveNeighbors;
      liveNeighbors = this.countLiveNeighbors(row, col);
      if (this.board[row][col] === 1 && (liveNeighbors < 2 || liveNeighbors > 3)) {
        return toDie.push([row, col]);
      } else if (this.board[row][col] === 0 && liveNeighbors === 3) {
        return toLive.push([row, col]);
      }
    };

    GameOfLife.prototype.validCoordinates = function(row, col) {
      if (row >= 0 && row < this.boardSize && col >= 0 && col < this.boardSize) {
        return true;
      } else {
        return false;
      }
    };

    GameOfLife.prototype.countLiveNeighbors = function(row, col) {
      var count;
      count = 0;
      if (this.validCoordinates(row, col + 1) && this.board[row][col + 1] === 1) {
        count += 1;
      }
      if (this.validCoordinates(row - 1, col) && this.board[row - 1][col] === 1) {
        count += 1;
      }
      if (this.validCoordinates(row - 1, col - 1) && this.board[row - 1][col - 1] === 1) {
        count += 1;
      }
      if (this.validCoordinates(row, col - 1) && this.board[row][col - 1] === 1) {
        count += 1;
      }
      if (this.validCoordinates(row - 1, col + 1) && this.board[row - 1][col + 1] === 1) {
        count += 1;
      }
      if (this.validCoordinates(row + 1, col - 1) && this.board[row + 1][col - 1] === 1) {
        count += 1;
      }
      if (this.validCoordinates(row + 1, col) && this.board[row + 1][col] === 1) {
        count += 1;
      }
      if (this.validCoordinates(row + 1, col + 1) && this.board[row + 1][col + 1] === 1) {
        count += 1;
      }
      return count;
    };

    GameOfLife.prototype.paintCell = function(row, col) {
      var canvas, coords;
      canvas = document.getElementById('canvas');
      this.ctx = canvas.getContext('2d');
      this.cellsize = this.canvasSize / this.boardSize;
      coords = [col * this.cellsize, row * this.cellsize, this.cellsize, this.cellsize];
      this.ctx.strokeStyle = this.lineColor;
      this.ctx.strokeRect.apply(this.ctx, coords);
      if (this.board[col][row] === 1) {
        this.board[col][row] = 0;
      } else {
        this.board[col][row] = 1;
      }
      this.ctx.fillStyle = this.board[col][row] === 1 ? this.liveCellColor : this.deadCellColor;
      return this.ctx.fillRect.apply(this.ctx, coords);
    };

    GameOfLife.prototype.paintBoard = function() {
      var col, coords, row, _i, _ref, _results;
      this.ctx = this.canvasContext();
      this.cellsize = this.canvasSize / this.boardSize;
      _results = [];
      for (row = _i = 0, _ref = this.boardSize; 0 <= _ref ? _i < _ref : _i > _ref; row = 0 <= _ref ? ++_i : --_i) {
        _results.push((function() {
          var _j, _ref1, _results1;
          _results1 = [];
          for (col = _j = 0, _ref1 = this.boardSize; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; col = 0 <= _ref1 ? ++_j : --_j) {
            coords = [row * this.cellsize, col * this.cellsize, this.cellsize, this.cellsize];
            this.ctx.strokeStyle = this.lineColor;
            this.ctx.strokeRect.apply(this.ctx, coords);
            this.ctx.fillStyle = this.board[row][col] === 1 ? this.liveCellColor : this.deadCellColor;
            _results1.push(this.ctx.fillRect.apply(this.ctx, coords));
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    GameOfLife.prototype.canvasContext = function() {
      var canvas;
      canvas = document.getElementById('canvas');
      canvas.height = this.canvasSize;
      canvas.width = this.canvasSize;
      return canvas.getContext('2d');
    };

    return GameOfLife;

  })();

  window.onload = function() {
    var game, intervalID;
    game = new GameOfLife();
    intervalID = -1;
    return $(function() {
      $("#random").click((function(_this) {
        return function() {
          game.randPopulateBoard();
          return game.paintBoard();
        };
      })(this));
      $("#clear").click(function() {
        clearInterval(intervalID);
        game.clearBoard();
        return game.paintBoard();
      });
      $("#start").click(function() {
        return intervalID = setInterval((function(_this) {
          return function() {
            return game.runGeneration();
          };
        })(this), 50);
      });
      $("#pause").click(function() {
        return clearInterval(intervalID);
      });
      $("#step").click(function() {
        clearInterval(intervalID);
        return game.runGeneration();
      });
      return $("#canvas").click(function(event) {
        var col, left, offsets, row, top, _i, _ref, _results;
        offsets = $('#canvas').offset();
        top = offsets.top;
        left = offsets.left;
        _results = [];
        for (row = _i = 0, _ref = game.boardSize; 0 <= _ref ? _i < _ref : _i > _ref; row = 0 <= _ref ? ++_i : --_i) {
          _results.push((function() {
            var _j, _ref1, _results1;
            _results1 = [];
            for (col = _j = 0, _ref1 = game.boardSize; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; col = 0 <= _ref1 ? ++_j : --_j) {
              if (event.pageX >= left + col * game.cellsize && event.pageX <= left + col * game.cellsize + game.cellsize && event.pageY >= top + row * game.cellsize && event.pageY <= top + row * game.cellsize + game.cellsize) {
                _results1.push(game.paintCell(row, col));
              } else {
                _results1.push(void 0);
              }
            }
            return _results1;
          })());
        }
        return _results;
      });
    });
  };

}).call(this);
